name: Deploy Production Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
    # Only run prod after dev succeeds
  workflow_run:
    workflows: ["Deploy Development Infrastructure"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VAR_organization_id: ${{ secrets.GCP_ORG_ID }}
  TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_folder_id: ${{ secrets.GCP_FOLDER_ID }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: 'Terraform Production'
    runs-on: ubuntu-latest
    environment: production

    # Only run if dev workflow succeeded or manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')

    defaults:
      run:
        shell: bash
        working-directory: infra/environments/prod

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Validate Environment Variables
      run: |
        if [ -z "$TF_VAR_organization_id" ]; then
          echo "ERROR: GCP_ORG_ID secret not set"
          exit 1
        fi
        if [ -z "$TF_VAR_billing_account" ]; then
          echo "ERROR: GCP_BILLING_ACCOUNT secret not set"
          exit 1
        fi
        if [ -z "$TF_VAR_domain_name" ]; then
          echo "ERROR: DOMAIN_NAME secret not set"
          exit 1
        fi
        echo "âœ… Required environment variables are set"

    - name: Configure Production Domain
      run: |
        # Use domain as-is for production
        echo "ðŸš€ Production domain: ${{ secrets.DOMAIN_NAME }}"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive ../../

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file=terraform.tfvars -no-color -out=tfplan
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        terraform show -no-color tfplan >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Manual Approval Required
      if: github.event_name != 'workflow_dispatch'
      run: |
        echo "ðŸš¨ Production deployment requires manual approval"
        echo "Use workflow_dispatch with 'apply' action to deploy to production"
        echo "Plan has been generated and saved for review"

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: terraform apply -var-file=terraform.tfvars -auto-approve

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: terraform destroy -var-file=terraform.tfvars -auto-approve

    - name: Save Terraform Outputs
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform output -json > ../../../terraform-outputs-prod.json

    - name: Upload Terraform Outputs
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-prod
        path: terraform-outputs-prod.json
        retention-days: 30

    - name: Notify Production Deployment
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        echo "ðŸš€ Production infrastructure deployed successfully!"
        echo "Domain: ${{ secrets.DOMAIN_NAME }}"