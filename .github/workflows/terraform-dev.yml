name: Deploy Development Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform-dev.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VAR_organization_id: ${{ secrets.GCP_ORG_ID }}
  TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_folder_id: ${{ secrets.GCP_FOLDER_ID }}
  TF_VAR_project_prefix: ${{ secrets.PROJECT_PREFIX }}
  TF_VAR_version_suffix: ${{ secrets.VERSION_SUFFIX }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: 'Terraform Development'
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash
        working-directory: infra/environments/dev

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Setup Google Cloud Auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Validate Environment Variables
      run: |
        if [ -z "$TF_VAR_organization_id" ]; then
          echo "ERROR: GCP_ORG_ID secret not set"
          exit 1
        fi
        if [ -z "$TF_VAR_billing_account" ]; then
          echo "ERROR: GCP_BILLING_ACCOUNT secret not set"
          exit 1
        fi
        if [ -z "$TF_VAR_domain_name" ]; then
          echo "ERROR: DOMAIN_NAME secret not set"
          exit 1
        fi
        echo "âœ… Required environment variables are set"

    - name: Configure Development Domain
      run: |
        # Add dev prefix to domain name
        export TF_VAR_domain_name="dev.${{ secrets.DOMAIN_NAME }}"
        echo "TF_VAR_domain_name=dev.${{ secrets.DOMAIN_NAME }}" >> $GITHUB_ENV
        echo "ðŸ”§ Development domain: $TF_VAR_domain_name"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive ../../

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${TF_VAR_project_prefix}-terraform-state-dev-${TF_VAR_version_suffix}" \
          -backend-config="prefix=dev/terraform.tfstate"

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file=terraform.tfvars -no-color -out=tfplan
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        terraform show -no-color tfplan >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const output = `#### Terraform Development Plan ðŸ“–

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.plan_output }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: terraform apply -var-file=terraform.tfvars -auto-approve

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: terraform destroy -var-file=terraform.tfvars -auto-approve

    - name: Save Terraform Outputs
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
        terraform output -json > ../../../terraform-outputs-dev.json

    - name: Upload Terraform Outputs
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-dev
        path: terraform-outputs-dev.json
        retention-days: 30
