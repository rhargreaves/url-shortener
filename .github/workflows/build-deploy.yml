name: Build and Deploy Application

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'cmd/**'
      - 'k8s/**'
      - 'Dockerfile'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/build-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'cmd/**'
      - 'k8s/**'
      - 'Dockerfile'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  REGISTRY: gcr.io
  PROJECT_PREFIX: urlshort

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Google Cloud Auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_PREFIX }}-dev-app/url-shortener
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set image name
      id: image
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "image=${{ env.REGISTRY }}/${{ env.PROJECT_PREFIX }}-dev-app/url-shortener:pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
        else
          echo "image=${{ env.REGISTRY }}/${{ env.PROJECT_PREFIX }}-dev-app/url-shortener:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      id: build
      run: |
        docker build -t ${{ steps.image.outputs.image }} .
        docker push ${{ steps.image.outputs.image }}

        # Get image digest
        digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.image.outputs.image }} | cut -d'@' -f2)
        echo "digest=$digest" >> $GITHUB_OUTPUT

    - name: Run Container Security Scan
      run: |
        gcloud components install docker-credential-gcr
        gcloud container images scan ${{ steps.image.outputs.image }} --format="table(vulnerability.effectiveSeverity,vulnerability.cvssScore,package.name,version.name)"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    environment: development
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.PROJECT_PREFIX }}-dev-url-shortener --region=europe-west1 --project=${{ env.PROJECT_PREFIX }}-dev-app

    - name: Update image in manifests
      run: |
        # Update image in deployment
        sed -i "s|gcr.io/PROJECT_ID/url-shortener:latest|${{ needs.build.outputs.image }}|g" k8s/url-shortener.yaml

        # Update project ID placeholders
        sed -i "s/PROJECT_ID/${{ env.PROJECT_PREFIX }}-dev-app/g" k8s/url-shortener.yaml

    - name: Deploy to Development
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/url-shortener.yaml
        kubectl apply -f k8s/istio/
        kubectl apply -f k8s/monitoring/
        kubectl apply -f k8s/hpa.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/url-shortener -n url-shortener --timeout=300s

    - name: Get service info
      run: |
        kubectl get services -n url-shortener
        kubectl get pods -n url-shortener

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    environment: production
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'))

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.PROJECT_PREFIX }}-prod-url-shortener --region=europe-west1 --project=${{ env.PROJECT_PREFIX }}-prod-app

    - name: Update image for production
      run: |
        # Tag image for production
        prod_image="${{ env.REGISTRY }}/${{ env.PROJECT_PREFIX }}-prod-app/url-shortener:${{ github.sha }}"
        docker pull ${{ needs.build.outputs.image }}
        docker tag ${{ needs.build.outputs.image }} $prod_image
        docker push $prod_image

        # Update manifests for production
        sed -i "s|gcr.io/PROJECT_ID/url-shortener:latest|$prod_image|g" k8s/url-shortener.yaml
        sed -i "s/PROJECT_ID/${{ env.PROJECT_PREFIX }}-prod-app/g" k8s/url-shortener.yaml

    - name: Deploy to Production
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/url-shortener.yaml
        kubectl apply -f k8s/istio/
        kubectl apply -f k8s/monitoring/
        kubectl apply -f k8s/hpa.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/url-shortener -n url-shortener --timeout=300s

    - name: Verify production deployment
      run: |
        kubectl get services -n url-shortener
        kubectl get pods -n url-shortener
        echo "ðŸš€ Production deployment completed!"
